{"version":3,"sources":["../src/rules.ts","../src/validator.ts","../src/use-validator.ts","../src/context.ts","../src/validator-field.tsx","../src/validator-wrapper.tsx"],"names":["emailReg","rules","value","min","max","Field","required","id","isValid","message","isEmptyValue","instance","Validator","params","field","index","prevResult","errors","inst","useValidator","validator","validateObject","Context","createContext","ValidatorField","forwardRef","props","_ref","children","customErrors","registerField","unregisterField","useContext","propsRef","useRef","customErrorsRef","handleRef","curr","customError","item","useEffect","validity","ValidatorWrapper","stopAtFirstError","ref","fieldsRef","setCustomErrors","useState","useCallback","getField","setCustomError","prev","clearCustomErrors","validate","comp","useImperativeHandle","contextValue","useMemo","jsx"],"mappings":"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","file":"index.js","sourcesContent":["import type { ValidatorRule } from './types'\n\n// eslint-disable-next-line\nconst emailReg =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport type ValidatorRules = ValidatorRule[]\n\nexport const rules = {\n  notEmpty: [\n    {\n      rule: (value) => value !== '' && value.length > 0,\n      message: 'Value is required',\n    },\n  ],\n\n  bool: [\n    {\n      rule: (value) => !!value,\n      message: 'Value is required',\n    },\n  ],\n\n  password: [\n    {\n      rule: (value) => value.length > 0,\n      message: 'Password field cannot be empty',\n    },\n    {\n      rule: (value) => value.length > 5,\n      message: 'Password field can not be less than 6 characters',\n    },\n  ],\n\n  email: [\n    {\n      rule: (value) => !!value && value !== '' && value.length !== 0,\n      message: 'Email is required',\n    },\n    {\n      rule: (value) => emailReg.test(String(value).toLowerCase()),\n      message: 'Email is invalid',\n    },\n  ],\n\n  min: (min) => [\n    {\n      rule: (value) => Number.parseFloat(value) > min,\n      message: `The value must be greater than ${min}`,\n    },\n  ],\n\n  max: (max) => [\n    {\n      rule: (value) => Number.parseFloat(value) < max,\n      message: `The value must be smaller ${max}`,\n    },\n  ],\n\n  length: (min, max?) => [\n    {\n      rule: (value) => String(value).length >= min,\n      message: `No less than ${min} symbols`,\n    },\n    {\n      rule: (value) => (max !== undefined ? String(value).length <= max : true),\n      message: `No more than ${max} symbols`,\n    },\n  ],\n}\n","import type { ValidatorRules } from './rules'\nimport type { FieldParams, Validity } from './types'\nimport type { Value } from './validator-field'\n\nexport class Field {\n  protected rules: ValidatorRules\n  protected required: boolean\n  protected value: Value\n  public id: string | number\n\n  constructor({ rules, required, value, id }: FieldParams) {\n    this.rules = rules\n    this.required = required\n    this.value = value\n    this.id = id\n  }\n\n  validate(): Validity {\n    let isValid = true\n    let message = ''\n    const { rules, value, required, id } = this\n\n    const isEmptyValue = !value && Number.parseFloat(value) !== 0\n\n    if (!rules.length || (isEmptyValue && required === false)) {\n      return { isValid, message, id }\n    }\n    for (const instance of rules) {\n      if (isValid) {\n        isValid = instance.rule(value)\n        if (!isValid) {\n          if (typeof instance.message === 'function') {\n            message = instance.message(value)\n          } else {\n            message = instance.message\n          }\n        }\n      }\n    }\n    return { isValid, message, id }\n  }\n}\n\nexport interface ValidatorParams {\n  stopAtFirstError: boolean\n}\n\nexport class Validator {\n  private fields: Field[]\n  private params: ValidatorParams\n\n  constructor(params?: ValidatorParams) {\n    this.params = params || null\n    this.fields = []\n  }\n\n  addField(params: FieldParams): Field {\n    const field = new Field(params)\n    this.fields.push(field)\n    return field\n  }\n\n  removeField(field: Field): void {\n    const index = this.fields.indexOf(field)\n    if (index > -1) this.fields.splice(index, 1)\n  }\n\n  getField(id: Field['id']): Field {\n    return this.fields.find((field) => field.id === id) || null\n  }\n\n  validate(): Validity {\n    let prevResult: Validity | null\n    const statuses = this.fields.map((field) => {\n      if (this.params?.stopAtFirstError && prevResult && prevResult.isValid === false) {\n        return null\n      }\n      prevResult = field.validate()\n      return prevResult\n    })\n\n    const errors = statuses.filter((inst) => inst && inst.isValid === false)\n\n    if (errors.length) {\n      const { isValid, message } = errors[0]\n      return { isValid, message, errors }\n    }\n    return { isValid: true, message: '' }\n  }\n}\n","import type { ValidatorRules } from './rules'\nimport type { Validity } from './types'\nimport { Validator } from './validator'\nimport type { Value } from './validator-field'\n\nexport function useValidator(value: Value, rules: ValidatorRules): [boolean, Pick<Validity, 'message' | 'errors'>] {\n  const validator = new Validator()\n  validator.addField({ value, rules })\n  const { isValid, ...validateObject } = validator.validate()\n  return [isValid, validateObject]\n}\n","import { createContext } from 'react'\n\nimport type { FieldParams, Validity } from './types'\n\nexport interface RegisteredFieldHandle {\n  props: FieldParams\n  validate: () => Validity\n}\n\nexport const Context = createContext<{\n  registerField: (field: RegisteredFieldHandle) => void\n  unregisterField: (field: RegisteredFieldHandle) => void\n  customErrors: Array<Validity>\n}>(null)\n","import { forwardRef, type ReactNode, useContext, useEffect, useRef } from 'react'\nimport type { FieldParams, Validity } from 'types'\n\nimport { Context, type RegisteredFieldHandle } from './context'\nimport { Field } from './validator'\n\n// biome-ignore lint/suspicious/noExplicitAny: <need>\nexport type Value = any\n\ntype Fn = (validity: Validity, value: Value) => ReactNode\n\ntype Props = FieldParams & {\n  children?: ReactNode | Fn\n}\n\nexport const ValidatorField = forwardRef<unknown, Props>(function ValidatorField(props: Props, _ref) {\n  const { children, value } = props\n  const { customErrors, registerField, unregisterField } = useContext(Context)\n\n  const propsRef = useRef(props)\n  propsRef.current = props\n\n  const customErrorsRef = useRef(customErrors)\n  customErrorsRef.current = customErrors\n\n  const handleRef = useRef<RegisteredFieldHandle | null>(null)\n  if (!handleRef.current) {\n    handleRef.current = {\n      get props() {\n        return propsRef.current\n      },\n      validate: () => {\n        const curr = propsRef.current\n        const customError = customErrorsRef.current.find((item) => item.id === curr.id)\n        if (customError) {\n          return customError\n        }\n        const field = new Field({\n          rules: curr.rules,\n          required: curr.required,\n          value: curr.value,\n          id: curr.id,\n        })\n        return field.validate()\n      },\n    }\n  }\n\n  useEffect(() => {\n    if (handleRef.current) registerField(handleRef.current)\n    return () => {\n      if (handleRef.current) unregisterField(handleRef.current)\n    }\n  }, [registerField, unregisterField])\n\n  const validity = handleRef.current.validate()\n\n  return typeof children === 'function' ? (children as Fn)(validity, value) : (children as ReactNode)\n})\n","import { forwardRef, type ReactNode, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react'\n\nimport { Context, type RegisteredFieldHandle } from './context'\nimport type { Validity } from './types'\nimport { Validator } from './validator'\n\ninterface ComponentProps {\n  children?: ReactNode\n  stopAtFirstError?: boolean\n}\n\nexport interface ValidatorWrapper {\n  validate: () => Validity\n  getField: (id: string | number) => RegisteredFieldHandle | null\n  registerField: (field: RegisteredFieldHandle) => void\n  unregisterField: (field: RegisteredFieldHandle) => void\n  setCustomError: (customError: Validity) => void\n  clearCustomErrors: () => void\n}\n\nexport const ValidatorWrapper = forwardRef<ValidatorWrapper, ComponentProps>(function ValidatorWrapper(\n  { children, stopAtFirstError },\n  ref,\n) {\n  const fieldsRef = useRef<RegisteredFieldHandle[]>([])\n  const [customErrors, setCustomErrors] = useState<Validity[]>([])\n\n  const registerField = useCallback((field: RegisteredFieldHandle) => {\n    if (field && !fieldsRef.current.includes(field)) {\n      fieldsRef.current.push(field)\n    }\n  }, [])\n\n  const unregisterField = useCallback((field: RegisteredFieldHandle) => {\n    const index = fieldsRef.current.indexOf(field)\n    if (index > -1) fieldsRef.current.splice(index, 1)\n  }, [])\n\n  const getField = useCallback<ValidatorWrapper['getField']>((id) => {\n    return fieldsRef.current.find((field) => field?.props?.id === id) || null\n  }, [])\n\n  const setCustomError = useCallback<ValidatorWrapper['setCustomError']>((customError) => {\n    setCustomErrors((prev) => [...prev, customError])\n  }, [])\n\n  const clearCustomErrors = useCallback<ValidatorWrapper['clearCustomErrors']>(() => {\n    setCustomErrors([])\n  }, [])\n\n  const validate = useCallback<ValidatorWrapper['validate']>(() => {\n    const validator = new Validator({ stopAtFirstError })\n    for (const comp of fieldsRef.current) {\n      validator.addField(comp.props)\n    }\n    return validator.validate()\n  }, [stopAtFirstError])\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      validate,\n      getField,\n      registerField,\n      unregisterField,\n      setCustomError,\n      clearCustomErrors,\n    }),\n    [validate, getField, registerField, unregisterField, setCustomError, clearCustomErrors],\n  )\n\n  const contextValue = useMemo(\n    () => ({ customErrors, registerField, unregisterField }),\n    [customErrors, registerField, unregisterField],\n  )\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\n})\n"]}