{"version":3,"sources":["../src/rules.ts","../src/context.ts","../src/validator.ts","../src/validator-field.tsx","../src/validator-wrapper.tsx","../src/use-validator.ts"],"names":["emailReg","rules","value","min","max","Context","createContext","Field","required","id","isValid","message","isEmptyValue","instance","Validator","params","field","index","prevResult","errors","inst","ValidationFieldWrapper","Component","props","customError","item","children","validity","ValidatorField","jsx","data","ValidatorWrapper","validator","comp","useValidator","validateObject"],"mappings":"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","file":"index.mjs","sourcesContent":["import type { ValidatorRule } from './types'\n\n// eslint-disable-next-line\nconst emailReg =\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport type ValidatorRules = ValidatorRule[]\n\nexport const rules = {\n  notEmpty: [\n    {\n      rule: (value) => value !== '' && value.length > 0,\n      message: 'Value is required',\n    },\n  ],\n\n  bool: [\n    {\n      rule: (value) => !!value,\n      message: 'Value is required',\n    },\n  ],\n\n  password: [\n    {\n      rule: (value) => value.length > 0,\n      message: 'Password field cannot be empty',\n    },\n    {\n      rule: (value) => value.length > 5,\n      message: 'Password field can not be less than 6 characters',\n    },\n  ],\n\n  email: [\n    {\n      rule: (value) => !!value && value !== '' && value.length !== 0,\n      message: 'Email is required',\n    },\n    {\n      rule: (value) => emailReg.test(String(value).toLowerCase()),\n      message: 'Email is invalid',\n    },\n  ],\n\n  min: (min) => [\n    {\n      rule: (value) => Number.parseFloat(value) > min,\n      message: `The value must be greater than ${min}`,\n    },\n  ],\n\n  max: (max) => [\n    {\n      rule: (value) => Number.parseFloat(value) < max,\n      message: `The value must be smaller ${max}`,\n    },\n  ],\n\n  length: (min, max?) => [\n    {\n      rule: (value) => String(value).length >= min,\n      message: `No less than ${min} symbols`,\n    },\n    {\n      rule: (value) => (max !== undefined ? String(value).length <= max : true),\n      message: `No more than ${max} symbols`,\n    },\n  ],\n}\n","import { createContext } from 'react'\n\nimport type { Validity } from './types'\n\nexport const Context = createContext<{\n  registerField: (field: string | number) => void\n  unregisterField: (field: string | number) => void\n  customErrors: Array<Validity>\n}>(null)\n","import type { ValidatorRules } from './rules'\nimport type { FieldParams, Validity } from './types'\nimport type { Value } from './validator-field'\n\nexport class Field {\n  private rules: ValidatorRules\n  private required: boolean\n  private value: Value\n  public id: string | number\n\n  constructor({ rules, required, value, id }: FieldParams) {\n    this.rules = rules\n    this.required = required\n    this.value = value\n    this.id = id\n  }\n\n  validate(): Validity {\n    let isValid = true\n    let message = ''\n    const { rules, value, required, id } = this\n\n    const isEmptyValue = !value && Number.parseFloat(value) !== 0\n\n    if (!rules.length || (isEmptyValue && required === false)) {\n      return { isValid, message, id }\n    }\n    for (const instance of rules) {\n      if (isValid) {\n        isValid = instance.rule(value)\n        if (!isValid) {\n          if (typeof instance.message === 'function') {\n            message = instance.message(value)\n          } else {\n            message = instance.message\n          }\n        }\n      }\n    }\n    return { isValid, message, id }\n  }\n}\n\nexport interface ValidatorParams {\n  stopAtFirstError: boolean\n}\n\nexport class Validator {\n  private fields: Field[]\n  private params: ValidatorParams\n\n  constructor(params?: ValidatorParams) {\n    this.params = params || null\n    this.fields = []\n  }\n\n  addField(params: FieldParams): Field {\n    const field = new Field(params)\n    this.fields.push(field)\n    return field\n  }\n\n  removeField(field: Field): void {\n    const index = this.fields.indexOf(field)\n    if (index > -1) this.fields.splice(index, 1)\n  }\n\n  getField(id: Field['id']): Field {\n    return this.fields.find((field) => field.id === id) || null\n  }\n\n  validate(): Validity {\n    let prevResult: Validity | null\n    const statuses = this.fields.map((field) => {\n      if (this.params?.stopAtFirstError && prevResult && prevResult.isValid === false) {\n        return null\n      }\n      prevResult = field.validate()\n      return prevResult\n    })\n\n    const errors = statuses.filter((inst) => inst && inst.isValid === false)\n\n    if (errors.length) {\n      const { isValid, message } = errors[0]\n      return { isValid, message, errors }\n    }\n    return { isValid: true, message: '' }\n  }\n}\n","import { Component, type ReactNode } from 'react'\nimport type { Validity } from 'types'\n\nimport { Context } from './context'\nimport type { ValidatorRules } from './rules'\nimport { Field } from './validator'\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport type Value = any\n\ntype Fn = (validity: Validity, value: Value) => ReactNode\n\ninterface Props {\n  rules?: ValidatorRules\n  required?: boolean\n  value?: Value\n  id?: string | number\n  children?: ReactNode | Fn\n  unregisterField: (val: Value) => void\n  registerField: (val: Value) => void\n  customErrors: Array<Validity>\n}\n\nclass ValidationFieldWrapper extends Component<Props> {\n  componentWillUnmount() {\n    this.props.unregisterField(this)\n  }\n\n  componentDidMount() {\n    this.props.registerField(this)\n  }\n\n  validate(): Validity {\n    const props = this.props\n    const customError = props.customErrors.find((item) => item.id === props.id)\n    if (customError) {\n      return customError\n    }\n\n    const field = new Field({\n      rules: props.rules,\n      required: props.required,\n      value: props.value,\n      id: props.id,\n    })\n    return field.validate()\n  }\n\n  render() {\n    const { children, value } = this.props\n    const validity = this.validate()\n    return typeof children === 'function' ? children(validity, value) : children\n  }\n}\n\nexport function ValidatorField(props: Omit<Props, 'registerField' | 'unregisterField' | 'customErrors'>) {\n  return (\n    <Context.Consumer>\n      {(data) => (\n        <ValidationFieldWrapper\n          {...props}\n          customErrors={data.customErrors}\n          registerField={data.registerField}\n          unregisterField={data.unregisterField}\n        />\n      )}\n    </Context.Consumer>\n  )\n}\n","import { Component, type ReactNode, type RefObject } from 'react'\n\nimport { Context } from './context'\nimport type { Validity } from './types'\nimport { type Field, Validator } from './validator'\n\ninterface ComponentProps {\n  children?: ReactNode\n  stopAtFirstError?: boolean\n  ref?: RefObject<ValidatorWrapper>\n}\n\nexport class ValidatorWrapper extends Component<ComponentProps> {\n  fields = []\n  state = {\n    customErrors: [],\n  }\n\n  constructor(props) {\n    super(props)\n    this.registerField = this.registerField.bind(this)\n    this.unregisterField = this.unregisterField.bind(this)\n  }\n\n  componentWillUnmount() {\n    this.fields = []\n  }\n\n  registerField(field) {\n    if (field && !this.fields.includes(field)) {\n      this.fields.push(field)\n    }\n  }\n\n  unregisterField(field) {\n    const index = this.fields.indexOf(field)\n    if (index > -1) this.fields.splice(index, 1)\n  }\n\n  getField(id): Field | null {\n    return this.fields.find((field) => field.props.id === id) || null\n  }\n\n  setCustomError(customError: Validity) {\n    this.setState({\n      customErrors: [...this.state.customErrors, customError],\n    })\n  }\n\n  clearCustomErrors() {\n    this.setState({ customErrors: [] })\n  }\n\n  validate(): Validity {\n    const validator = new Validator({ stopAtFirstError: this.props.stopAtFirstError })\n    for (const comp of this.fields) {\n      validator.addField(comp.props)\n    }\n    return validator.validate()\n  }\n\n  render(): ReactNode {\n    return (\n      <Context.Provider\n        value={{\n          customErrors: this.state.customErrors,\n          registerField: this.registerField,\n          unregisterField: this.unregisterField,\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n","import type { ValidatorRules } from './rules'\nimport type { Validity } from './types'\nimport { Validator } from './validator'\nimport type { Value } from './validator-field'\n\nexport function useValidator(value: Value, rules: ValidatorRules): [boolean, Pick<Validity, 'message' | 'errors'>] {\n  const validator = new Validator()\n  validator.addField({ value, rules })\n  const { isValid, ...validateObject } = validator.validate()\n  return [isValid, validateObject]\n}\n"]}